@page "/"
@using MudBlazor
@using System.Threading
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<MudPaper Class="pa-4" Elevation="2" Style="width: 400px; margin: auto;">

    <MudGrid Justify="Justify.SpaceBetween" AlignItems="Center">
        <MudItem xs="5">
            <MudAutocomplete T="string"
                             Label="Sura Nomi"
                             Value="_state"
                             ValueChanged="OnSurahSelected"
                             SearchFunc="@Search"
                             Variant="Variant.Filled"
                             ShowProgressIndicator="true"
                             MaxItems="114" />
        </MudItem>
        <MudItem xs="3">
            <MudNumericField T="int" 
                             Label="Ayah" 
                             Dense="true" 
                             Value="SelectedAyah" 
                             ValueChanged="OnAyahChanged" 
                             Min="1" 
                             Max="@MaxAyahNumber" />
        </MudItem>
        <MudItem xs="3" Style="">
            <MudButton Variant="Variant.Filled" Size="Size.Small" 
                       Color="@(ShowTranslation ? Color.Success : Color.Primary)" 
                       OnClick="ToggleTranslation" 
                       StartIcon="@Icons.Material.Filled.Translate">
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudDivider Class="my-4" />
    <div style="text-align: center;">
        @if (!string.IsNullOrEmpty(PngUrl))
        {
            <img src="@PngUrl" alt="Selected Ayah Image" style="max-width: 100%; height: auto;" />
        }
    </div>

    @if (ShowTranslation && !string.IsNullOrEmpty(TranslationText))
    {
        <MudDivider Class="my-4" />
        <div style="font-size: 14px; line-height: 1.8;">
            @TranslationText
        </div>
    }

    <MudDivider Class="my-4" />
    <MudGrid AlignItems="Center" JustifyContent="Center">
        <MudItem>
            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" 
                           Color="Color.Primary" 
                           OnClick="PlayAudio" 
                           Disabled="IsPlaying" />
        </MudItem>
        <MudItem>
            <MudIconButton Icon="@Icons.Material.Filled.Stop" 
                           Color="Color.Primary" 
                           OnClick="StopAudio" 
                           Disabled="!IsPlaying" />
        </MudItem>
        <MudItem>
            <MudTooltip Text="@($"Mode: {_playMode}")">
                <MudIconButton Icon="@ModeIcon" 
                               Color="Color.Primary" 
                               OnClick="TogglePlayMode" />
            </MudTooltip>
        </MudItem>
    </MudGrid>

</MudPaper>

@code {
    private int SelectedAyah = 1;
    private string _state { get; set; } = string.Empty;
    private int MaxAyahNumber = 1;
    private string TranslationText { get; set; } = string.Empty;
    private string PngUrl { get; set; } = string.Empty;
    private bool ShowTranslation = false;
    private bool IsPlaying = false;

    private int SelectedSurahNumber = 1;

    private SurahData? _currentAlafasySurah = null;

    private PlayMode _playMode = PlayMode.Default;
    private enum PlayMode
    {
        Default,
        Repeat,
        AutoNext
    }

    private string ModeIcon => _playMode switch
    {
        PlayMode.Default => Icons.Material.Filled.FilterNone,
        PlayMode.Repeat => Icons.Material.Filled.Repeat,
        PlayMode.AutoNext => Icons.Material.Filled.SkipNext,
        _ => Icons.Material.Filled.FilterNone
    };

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        var apiUrl = "https://api.alquran.cloud/v1/surah";
        var response = await Http.GetFromJsonAsync<ApiResponse>(apiUrl, token);
        return response?.Data?.Select(surah => surah.EnglishName) ?? Enumerable.Empty<string>();
    }

    private async Task OnSurahSelected(string surahName)
    {
        _state = surahName;

        var apiUrl = "https://api.alquran.cloud/v1/surah";
        var response = await Http.GetFromJsonAsync<ApiResponse>(apiUrl);
        var selectedSurah = response?.Data?.FirstOrDefault(s => s.EnglishName == surahName);

        if (selectedSurah != null)
        {
            SelectedSurahNumber = selectedSurah.Number;
            MaxAyahNumber = selectedSurah.NumberOfAyahs;
            SelectedAyah = 1;

            await LoadAlafasySurah(SelectedSurahNumber);

            await LoadAyah(SelectedSurahNumber);
        }
    }

    private async Task OnAyahChanged(int ayahNumber)
    {
        if (ayahNumber >= 1 && ayahNumber <= MaxAyahNumber)
        {
            SelectedAyah = ayahNumber;
            await LoadAyah(SelectedSurahNumber);
        }
    }

    private async Task LoadAlafasySurah(int surahNumber)
    {
        var url = $"https://api.alquran.cloud/v1/surah/{surahNumber}/ar.alafasy";
        var resp = await Http.GetFromJsonAsync<SurahAlafasyResponse>(url);
        if (resp?.Data != null)
        {
            _currentAlafasySurah = resp.Data;
        }
        else
        {
            _currentAlafasySurah = null;
        }
    }

    private async Task LoadAyah(int surahNumber)
    {
        PngUrl = $"https://cdn.islamic.network/quran/images/{surahNumber}_{SelectedAyah}.png";

        var translationUrl = $"https://api.alquran.cloud/v1/ayah/{surahNumber}:{SelectedAyah}/uz.sodik";
        var translationResponse = await Http.GetFromJsonAsync<AyahResponse>(translationUrl);
        TranslationText = translationResponse?.Data?.Text ?? "";
    }

    private void ToggleTranslation()
    {
        ShowTranslation = !ShowTranslation;
    }

    private async Task PlayAudio()
    {
        IsPlaying = true;

        if (_currentAlafasySurah != null 
            && _currentAlafasySurah.Ayahs.Count >= SelectedAyah)
        {
            var audioUrl = _currentAlafasySurah.Ayahs[SelectedAyah - 1].Audio;

            var objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("audioPlayer.playAudio", audioUrl, objRef);
        }
        else
        {
            var fallbackUrl = $"https://cdn.islamic.network/quran/audio/128/ar.alafasy/{SelectedAyah}.mp3";

            var objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("audioPlayer.playAudio", fallbackUrl, objRef);
        }
    }

    private void StopAudio()
    {
        IsPlaying = false;
        JSRuntime.InvokeVoidAsync("audioPlayer.stopAudio");
    }

    private void TogglePlayMode()
    {
        switch (_playMode)
        {
            case PlayMode.Default:
                _playMode = PlayMode.Repeat;
                break;
            case PlayMode.Repeat:
                _playMode = PlayMode.AutoNext;
                break;
            default:
                _playMode = PlayMode.Default;
                break;
        }
    }

    [JSInvokable]
    public async Task OnAudioEnded()
    {
        IsPlaying = false;

        switch (_playMode)
        {
            case PlayMode.Default:
                break;

            case PlayMode.Repeat:
                await PlayAudio();
                break;

            case PlayMode.AutoNext:
                await GoNextAyah();
                break;
        }
    }

    private async Task GoNextAyah()
    {
        if (SelectedAyah < MaxAyahNumber)
        {
            SelectedAyah++;
            await LoadAyah(SelectedSurahNumber);
            await PlayAudio();
        }
        else
        {
            if (SelectedSurahNumber < 114)
            {
                SelectedSurahNumber++;

            }
            else
            {
                SelectedSurahNumber = 1;
            }
            await OnSurahSelectedByNumber(SelectedSurahNumber);
            await PlayAudio();
        }
        StateHasChanged();

    }

    private async Task OnSurahSelectedByNumber(int surahNumber)
    {
        var apiUrl = "https://api.alquran.cloud/v1/surah";
        var response = await Http.GetFromJsonAsync<ApiResponse>(apiUrl);
        var selectedSurah = response?.Data?.FirstOrDefault(x => x.Number == surahNumber);

        if (selectedSurah != null)
        {
            _state = selectedSurah.EnglishName;
            MaxAyahNumber = selectedSurah.NumberOfAyahs;
            SelectedAyah = 1;

            await LoadAlafasySurah(surahNumber);

            await LoadAyah(surahNumber);
        }
    }


    public class ApiResponse
    {
        public int Code { get; set; }
        public string Status { get; set; } = string.Empty;
        public List<Surah> Data { get; set; } = new List<Surah>();
    }

    public class Surah
    {
        public int Number { get; set; }
        public string Name { get; set; } = string.Empty;
        public string EnglishName { get; set; } = string.Empty;
        public string EnglishNameTranslation { get; set; } = string.Empty;
        public int NumberOfAyahs { get; set; }
        public string RevelationType { get; set; } = string.Empty;
    }

    public class AyahResponse
    {
        public int Code { get; set; }
        public string Status { get; set; } = string.Empty;
        public Ayah Data { get; set; } = new Ayah();
    }

    public class Ayah
    {
        public int Number { get; set; }
        public string Text { get; set; } = string.Empty;
    }

    public class SurahAlafasyResponse
    {
        public int Code { get; set; }
        public string Status { get; set; } = string.Empty;
        public SurahData? Data { get; set; }
    }

    public class SurahData
    {
        public int Number { get; set; }
        public string Name { get; set; } = string.Empty;
        public string EnglishName { get; set; } = string.Empty;
        public string EnglishNameTranslation { get; set; } = string.Empty;
        public int NumberOfAyahs { get; set; }
        public string RevelationType { get; set; } = string.Empty;
        public Edition Edition { get; set; } = new Edition();
        public List<AlafasyAyah> Ayahs { get; set; } = new List<AlafasyAyah>();
    }

    public class Edition
    {
        public string Identifier { get; set; } = string.Empty;
        public string Language { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string EnglishName { get; set; } = string.Empty;
        public string Format { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
    }

    public class AlafasyAyah
    {
        public int Number { get; set; }
        public string Audio { get; set; } = string.Empty;
        public List<string> AudioSecondary { get; set; } = new List<string>();
        public string Text { get; set; } = string.Empty;
    }
}
